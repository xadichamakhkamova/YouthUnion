// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package storage

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addTeamMember = `-- name: AddTeamMember :one
INSERT INTO team_members (
    team_id,
    user_id
)
VALUES ($1, $2)
RETURNING
    id,
    team_id,
    user_id,
    role,
    joined_at
`

type AddTeamMemberParams struct {
	TeamID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) AddTeamMember(ctx context.Context, arg AddTeamMemberParams) (TeamMember, error) {
	row := q.db.QueryRowContext(ctx, addTeamMember, arg.TeamID, arg.UserID)
	var i TeamMember
	err := row.Scan(
		&i.ID,
		&i.TeamID,
		&i.UserID,
		&i.Role,
		&i.JoinedAt,
	)
	return i, err
}

const createTeam = `-- name: CreateTeam :one
INSERT INTO teams (
    name,
    leader_id,
    event_id
)
VALUES ($1, $2, $3)
RETURNING
    id,
    name,
    leader_id,
    event_id,
    is_ready,
    created_at,
    updated_at
`

type CreateTeamParams struct {
	Name     string
	LeaderID uuid.UUID
	EventID  uuid.UUID
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, createTeam, arg.Name, arg.LeaderID, arg.EventID)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LeaderID,
		&i.EventID,
		&i.IsReady,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTeamMembers = `-- name: GetTeamMembers :many
SELECT 
    id,
    team_id,
    user_id,
    role,
    joined_at,
    COUNT(*) OVER() AS total_count
FROM team_members
WHERE team_id = $1
ORDER BY joined_at DESC
`

type GetTeamMembersRow struct {
	ID         uuid.UUID
	TeamID     uuid.UUID
	UserID     uuid.UUID
	Role       string
	JoinedAt   sql.NullTime
	TotalCount int64
}

func (q *Queries) GetTeamMembers(ctx context.Context, teamID uuid.UUID) ([]GetTeamMembersRow, error) {
	rows, err := q.db.QueryContext(ctx, getTeamMembers, teamID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTeamMembersRow
	for rows.Next() {
		var i GetTeamMembersRow
		if err := rows.Scan(
			&i.ID,
			&i.TeamID,
			&i.UserID,
			&i.Role,
			&i.JoinedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeamsByEvent = `-- name: GetTeamsByEvent :many
SELECT 
    id,
    name,
    leader_id,
    event_id,
    is_ready,
    created_at,
    updated_at,
    COUNT(*) OVER() AS total_count
FROM teams
WHERE event_id = $1
ORDER BY created_at DESC
LIMIT $2 
OFFSET $3
`

type GetTeamsByEventParams struct {
	EventID uuid.UUID
	Limit   int32
	Offset  int32
}

type GetTeamsByEventRow struct {
	ID         uuid.UUID
	Name       string
	LeaderID   uuid.UUID
	EventID    uuid.UUID
	IsReady    sql.NullBool
	CreatedAt  sql.NullTime
	UpdatedAt  sql.NullTime
	TotalCount int64
}

func (q *Queries) GetTeamsByEvent(ctx context.Context, arg GetTeamsByEventParams) ([]GetTeamsByEventRow, error) {
	rows, err := q.db.QueryContext(ctx, getTeamsByEvent, arg.EventID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTeamsByEventRow
	for rows.Next() {
		var i GetTeamsByEventRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.LeaderID,
			&i.EventID,
			&i.IsReady,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeTeamMember = `-- name: RemoveTeamMember :exec
DELETE FROM team_members
WHERE team_id = $1 AND user_id = $2
`

type RemoveTeamMemberParams struct {
	TeamID uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) RemoveTeamMember(ctx context.Context, arg RemoveTeamMemberParams) error {
	_, err := q.db.ExecContext(ctx, removeTeamMember, arg.TeamID, arg.UserID)
	return err
}

const updateTeam = `-- name: UpdateTeam :one
UPDATE teams
SET 
    name = $2
WHERE id = $1
RETURNING
    id,
    name,
    leader_id,
    event_id,
    is_ready,
    created_at,
    updated_at
`

type UpdateTeamParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) UpdateTeam(ctx context.Context, arg UpdateTeamParams) (Team, error) {
	row := q.db.QueryRowContext(ctx, updateTeam, arg.ID, arg.Name)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LeaderID,
		&i.EventID,
		&i.IsReady,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
