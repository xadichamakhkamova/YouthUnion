// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package storage

import (
	"database/sql"
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
)

type ScoredByType string

const (
	ScoredByTypeORGANIZER ScoredByType = "ORGANIZER"
	ScoredByTypeADMIN     ScoredByType = "ADMIN"
)

func (e *ScoredByType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ScoredByType(s)
	case string:
		*e = ScoredByType(s)
	default:
		return fmt.Errorf("unsupported scan type for ScoredByType: %T", src)
	}
	return nil
}

type NullScoredByType struct {
	ScoredByType ScoredByType
	Valid        bool // Valid is true if ScoredByType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullScoredByType) Scan(value interface{}) error {
	if value == nil {
		ns.ScoredByType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ScoredByType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullScoredByType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ScoredByType), nil
}

type Score struct {
	ID           uuid.UUID
	EventID      uuid.UUID
	TeamID       uuid.NullUUID
	UserID       uuid.UUID
	Points       int32
	Comment      sql.NullString
	ScoredByID   uuid.UUID
	ScoredByType ScoredByType
	CreatedAt    sql.NullTime
}
