// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package storage

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getGlobalRanking = `-- name: GetGlobalRanking :many
SELECT
    user_id,
    SUM(points) AS total_points
FROM scores
GROUP BY user_id
ORDER BY total_points DESC
LIMIT $1 
OFFSET $2
`

type GetGlobalRankingParams struct {
	Limit  int32
	Offset int32
}

type GetGlobalRankingRow struct {
	UserID      uuid.UUID
	TotalPoints int64
}

func (q *Queries) GetGlobalRanking(ctx context.Context, arg GetGlobalRankingParams) ([]GetGlobalRankingRow, error) {
	rows, err := q.db.QueryContext(ctx, getGlobalRanking, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGlobalRankingRow
	for rows.Next() {
		var i GetGlobalRankingRow
		if err := rows.Scan(&i.UserID, &i.TotalPoints); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getScoreByEvent = `-- name: GetScoreByEvent :many
SELECT 
    id,
    event_id,
    team_id,
    user_id,
    points,
    comment,
    scored_by_id,
    scored_by_type,
    created_at,
    COUNT(*) OVER() AS total_count
FROM scores 
WHERE event_id = $1
ORDER BY created_at DESC 
LIMIT $2 
OFFSET $3
`

type GetScoreByEventParams struct {
	EventID uuid.UUID
	Limit   int32
	Offset  int32
}

type GetScoreByEventRow struct {
	ID           uuid.UUID
	EventID      uuid.UUID
	TeamID       uuid.NullUUID
	UserID       uuid.UUID
	Points       int32
	Comment      sql.NullString
	ScoredByID   uuid.UUID
	ScoredByType ScoredByType
	CreatedAt    sql.NullTime
	TotalCount   int64
}

func (q *Queries) GetScoreByEvent(ctx context.Context, arg GetScoreByEventParams) ([]GetScoreByEventRow, error) {
	rows, err := q.db.QueryContext(ctx, getScoreByEvent, arg.EventID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetScoreByEventRow
	for rows.Next() {
		var i GetScoreByEventRow
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.TeamID,
			&i.UserID,
			&i.Points,
			&i.Comment,
			&i.ScoredByID,
			&i.ScoredByType,
			&i.CreatedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getScoreByTeam = `-- name: GetScoreByTeam :many
SELECT 
    id,
    event_id,
    team_id,
    user_id,
    points,
    comment,
    scored_by_id,
    scored_by_type,
    created_at,
    COUNT(*) OVER() AS total_count
FROM scores 
WHERE team_id = $1
ORDER BY created_at DESC 
LIMIT $2 
OFFSET $3
`

type GetScoreByTeamParams struct {
	TeamID uuid.NullUUID
	Limit  int32
	Offset int32
}

type GetScoreByTeamRow struct {
	ID           uuid.UUID
	EventID      uuid.UUID
	TeamID       uuid.NullUUID
	UserID       uuid.UUID
	Points       int32
	Comment      sql.NullString
	ScoredByID   uuid.UUID
	ScoredByType ScoredByType
	CreatedAt    sql.NullTime
	TotalCount   int64
}

func (q *Queries) GetScoreByTeam(ctx context.Context, arg GetScoreByTeamParams) ([]GetScoreByTeamRow, error) {
	rows, err := q.db.QueryContext(ctx, getScoreByTeam, arg.TeamID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetScoreByTeamRow
	for rows.Next() {
		var i GetScoreByTeamRow
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.TeamID,
			&i.UserID,
			&i.Points,
			&i.Comment,
			&i.ScoredByID,
			&i.ScoredByType,
			&i.CreatedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getScoreByUser = `-- name: GetScoreByUser :many
SELECT 
    id,
    event_id,
    team_id,
    user_id,
    points,
    comment,
    scored_by_id,
    scored_by_type,
    created_at,
    COUNT(*) OVER() AS total_count
FROM scores 
WHERE user_id = $1
ORDER BY created_at DESC 
LIMIT $2 
OFFSET $3
`

type GetScoreByUserParams struct {
	UserID uuid.UUID
	Limit  int32
	Offset int32
}

type GetScoreByUserRow struct {
	ID           uuid.UUID
	EventID      uuid.UUID
	TeamID       uuid.NullUUID
	UserID       uuid.UUID
	Points       int32
	Comment      sql.NullString
	ScoredByID   uuid.UUID
	ScoredByType ScoredByType
	CreatedAt    sql.NullTime
	TotalCount   int64
}

func (q *Queries) GetScoreByUser(ctx context.Context, arg GetScoreByUserParams) ([]GetScoreByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getScoreByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetScoreByUserRow
	for rows.Next() {
		var i GetScoreByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.EventID,
			&i.TeamID,
			&i.UserID,
			&i.Points,
			&i.Comment,
			&i.ScoredByID,
			&i.ScoredByType,
			&i.CreatedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const giveScore = `-- name: GiveScore :one
INSERT INTO scores (
    event_id,
    team_id,
    user_id,
    points,
    comment,
    scored_by_id,
    scored_by_type
)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING 
    id,
    event_id,
    team_id,
    user_id,
    points,
    comment,
    scored_by_id,
    scored_by_type,
    created_at
`

type GiveScoreParams struct {
	EventID      uuid.UUID
	TeamID       uuid.NullUUID
	UserID       uuid.UUID
	Points       int32
	Comment      sql.NullString
	ScoredByID   uuid.UUID
	ScoredByType ScoredByType
}

func (q *Queries) GiveScore(ctx context.Context, arg GiveScoreParams) (Score, error) {
	row := q.db.QueryRowContext(ctx, giveScore,
		arg.EventID,
		arg.TeamID,
		arg.UserID,
		arg.Points,
		arg.Comment,
		arg.ScoredByID,
		arg.ScoredByType,
	)
	var i Score
	err := row.Scan(
		&i.ID,
		&i.EventID,
		&i.TeamID,
		&i.UserID,
		&i.Points,
		&i.Comment,
		&i.ScoredByID,
		&i.ScoredByType,
		&i.CreatedAt,
	)
	return i, err
}
