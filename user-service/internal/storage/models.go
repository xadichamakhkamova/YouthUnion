// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package storage

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type GenderEnum string

const (
	GenderEnumMALE   GenderEnum = "MALE"
	GenderEnumFEMALE GenderEnum = "FEMALE"
)

func (e *GenderEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GenderEnum(s)
	case string:
		*e = GenderEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for GenderEnum: %T", src)
	}
	return nil
}

type NullGenderEnum struct {
	GenderEnum GenderEnum
	Valid      bool // Valid is true if GenderEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGenderEnum) Scan(value interface{}) error {
	if value == nil {
		ns.GenderEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GenderEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGenderEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GenderEnum), nil
}

type RolesType struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
	IsActive    sql.NullBool
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
	DeletedAt   sql.NullInt64
}

type User struct {
	ID           uuid.UUID
	Identifier   int32
	FirstName    string
	LastName     string
	PhoneNumber  string
	PasswordHash string
	Faculty      sql.NullString
	Course       sql.NullInt16
	BirthDate    string
	Gender       GenderEnum
	CreatedAt    sql.NullTime
	UpdatedAt    sql.NullTime
	DeletedAt    sql.NullInt64
}

type UserRole struct {
	ID         uuid.UUID
	UserID     uuid.UUID
	RoleID     uuid.UUID
	AssignedAt sql.NullTime
}

type UserSession struct {
	ID           uuid.UUID
	UserID       uuid.UUID
	RefreshToken string
	ExpiresAt    time.Time
	CreatedAt    sql.NullTime
}
