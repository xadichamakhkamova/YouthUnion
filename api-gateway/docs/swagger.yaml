basePath: /api/v1
definitions:
  models.AssignRoleRequest:
    properties:
      role_id:
        type: string
      user_id:
        type: string
    type: object
  models.ChangePasswordRequest:
    properties:
      new_password:
        type: string
      old_password:
        type: string
      user_id:
        type: string
    type: object
  models.ChangePasswordResponse:
    properties:
      status:
        type: integer
      updated_at:
        type: string
    type: object
  models.CreateRoleRequest:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  models.CreateUserRequest:
    properties:
      birth_date:
        type: string
      course:
        type: integer
      faculty:
        type: string
      first_name:
        type: string
      gender:
        $ref: '#/definitions/models.Gender'
      identifier:
        type: integer
      last_name:
        type: string
      password:
        type: string
      phone_number:
        type: string
    type: object
  models.DeleteRoleResponse:
    properties:
      deleted_at:
        type: string
      deleted_role_id:
        type: string
      status:
        type: integer
    type: object
  models.DeleteUserResponse:
    properties:
      deleted_at:
        type: string
      deleted_user_id:
        type: string
      status:
        type: integer
    type: object
  models.ErrorResponse:
    properties:
      code:
        description: HTTP status kodi
        example: 400
        type: integer
      details:
        description: Qo‘shimcha ma’lumot (ixtiyoriy)
      message:
        description: Xatolik tavsifi
        example: invalid data
        type: string
    type: object
  models.Gender:
    enum:
    - GENDER_UNSPECIFIED
    - MALE
    - FEMALE
    type: string
    x-enum-varnames:
    - GenderUnspecified
    - Male
    - Female
  models.GetUserByIdentifierRequest:
    properties:
      identifier:
        type: integer
      password:
        type: string
    type: object
  models.GetUserByIdentifierResponse:
    properties:
      status:
        type: integer
    type: object
  models.RemoveRoleResponse:
    properties:
      removed_at:
        type: string
      removed_role_id:
        type: string
      status:
        type: integer
    type: object
  models.RoleType:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.RoleTypeList:
    properties:
      roles:
        items:
          $ref: '#/definitions/models.RoleType'
        type: array
      total_count:
        type: integer
    type: object
  models.UpdateRoleRequest:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  models.UpdateUserRequest:
    properties:
      birth_date:
        type: string
      course:
        type: integer
      faculty:
        type: string
      first_name:
        type: string
      gender:
        $ref: '#/definitions/models.Gender'
      id:
        type: string
      last_name:
        type: string
      phone_number:
        type: string
    type: object
  models.User:
    properties:
      birth_date:
        type: string
      course:
        type: integer
      created_at:
        type: string
      faculty:
        type: string
      first_name:
        type: string
      gender:
        $ref: '#/definitions/models.Gender'
      id:
        type: string
      identifier:
        type: integer
      last_name:
        type: string
      phone_number:
        type: string
      updated_at:
        type: string
    type: object
  models.UserList:
    properties:
      total_count:
        type: integer
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.UserRole:
    properties:
      assigned_at:
        type: string
      id:
        type: string
      role_id:
        type: string
      user_id:
        type: string
    type: object
  models.UserRoleList:
    properties:
      total_count:
        type: integer
      user_roles:
        items:
          $ref: '#/definitions/models.UserRole'
        type: array
    type: object
host: localhost:9000
info:
  contact: {}
  description: API Gateway for the Youth Union microservice platform.
  title: Youth Union API Gateway
  version: "1.0"
paths:
  /api/v1/auth/change-password:
    patch:
      consumes:
      - application/json
      description: Allows user to change their password
      parameters:
      - description: Password change data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ChangePasswordResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Change Password
      tags:
      - Auth
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user using identifier and password
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.GetUserByIdentifierRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetUserByIdentifierResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get User by Identifier (Login)
      tags:
      - Auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Registers a new user in the system
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Register User
      tags:
      - Auth
  /api/v1/roles:
    get:
      description: Returns list of all role types
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RoleTypeList'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List Roles
      tags:
      - Roles
    post:
      consumes:
      - application/json
      description: Creates a new role type (admin only)
      parameters:
      - description: Role data
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/models.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.RoleType'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create Role Type
      tags:
      - Roles
  /api/v1/roles/{id}:
    delete:
      description: Deletes role type by ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeleteRoleResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete Role
      tags:
      - Roles
    get:
      description: Returns role details by ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RoleType'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Role By ID
      tags:
      - Roles
    put:
      consumes:
      - application/json
      description: Updates role information
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      - description: Role data
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/models.UpdateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RoleType'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Role
      tags:
      - Roles
  /api/v1/users:
    get:
      description: Returns list of users
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserList'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List Users
      tags:
      - Users
  /api/v1/users/{id}:
    delete:
      description: Deletes user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeleteUserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete User
      tags:
      - Users
    get:
      description: Returns user details by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get User By ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Updates user information
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update User
      tags:
      - Users
  /api/v1/users/{id}/roles:
    get:
      description: Returns list of roles assigned to a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.UserRoleList'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: List User Roles
      tags:
      - Roles
    post:
      consumes:
      - application/json
      description: Assigns a specific role to a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Role assignment data
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/models.AssignRoleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.UserRole'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Assign Role to User
      tags:
      - Roles
  /api/v1/users/{id}/roles/{role_id}:
    delete:
      description: Removes assigned role from user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Role ID
        in: path
        name: role_id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RemoveRoleResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Remove Role from User
      tags:
      - Roles
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
