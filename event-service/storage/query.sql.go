// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package storage

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
    event_type,
    title,
    description,
    location,
    start_time,
    end_time,
    created_by,
    max_participants
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING 
    id,
    event_type,
    title,
    description,
    location,
    start_time,
    end_time,
    created_by,
    max_participants,
    status,
    created_at,
    updated_at
`

type CreateEventParams struct {
	EventType       EventType
	Title           string
	Description     sql.NullString
	Location        sql.NullString
	StartTime       time.Time
	EndTime         sql.NullTime
	CreatedBy       uuid.UUID
	MaxParticipants sql.NullInt32
}

type CreateEventRow struct {
	ID              uuid.UUID
	EventType       EventType
	Title           string
	Description     sql.NullString
	Location        sql.NullString
	StartTime       time.Time
	EndTime         sql.NullTime
	CreatedBy       uuid.UUID
	MaxParticipants sql.NullInt32
	Status          sql.NullString
	CreatedAt       sql.NullTime
	UpdatedAt       sql.NullTime
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (CreateEventRow, error) {
	row := q.db.QueryRowContext(ctx, createEvent,
		arg.EventType,
		arg.Title,
		arg.Description,
		arg.Location,
		arg.StartTime,
		arg.EndTime,
		arg.CreatedBy,
		arg.MaxParticipants,
	)
	var i CreateEventRow
	err := row.Scan(
		&i.ID,
		&i.EventType,
		&i.Title,
		&i.Description,
		&i.Location,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedBy,
		&i.MaxParticipants,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :one
UPDATE events
SET deleted_at = $2
WHERE id = $1
RETURNING 'deleted' AS message
`

type DeleteEventParams struct {
	ID        uuid.UUID
	DeletedAt sql.NullInt64
}

func (q *Queries) DeleteEvent(ctx context.Context, arg DeleteEventParams) (string, error) {
	row := q.db.QueryRowContext(ctx, deleteEvent, arg.ID, arg.DeletedAt)
	var message string
	err := row.Scan(&message)
	return message, err
}

const getEvent = `-- name: GetEvent :one
SELECT 
    id,
    event_type,
    title,
    description,
    location,
    start_time,
    end_time,
    created_by,
    max_participants,
    status,
    created_at,
    updated_at 
FROM events 
WHERE id = $1
`

type GetEventRow struct {
	ID              uuid.UUID
	EventType       EventType
	Title           string
	Description     sql.NullString
	Location        sql.NullString
	StartTime       time.Time
	EndTime         sql.NullTime
	CreatedBy       uuid.UUID
	MaxParticipants sql.NullInt32
	Status          sql.NullString
	CreatedAt       sql.NullTime
	UpdatedAt       sql.NullTime
}

func (q *Queries) GetEvent(ctx context.Context, id uuid.UUID) (GetEventRow, error) {
	row := q.db.QueryRowContext(ctx, getEvent, id)
	var i GetEventRow
	err := row.Scan(
		&i.ID,
		&i.EventType,
		&i.Title,
		&i.Description,
		&i.Location,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedBy,
		&i.MaxParticipants,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEvents = `-- name: ListEvents :many
SELECT 
    id,
    event_type,
    title,
    description,
    location,
    start_time,
    end_time,
    created_by,
    max_participants,
    status,
    created_at,
    updated_at,
    COUNT(*) OVER() AS total_count
FROM events 
WHERE (
        $1::text=''
        OR LOWER(event_type) LIKE LOWER(CONCAT('%', $1::text, '%')) 
        OR LOWER(status) LIKE LOWER(CONCAT('%', $1::text, '%')) 
    )
ORDER BY created_at DESC 
LIMIT $2 
OFFSET ($1 - $1) * $2
`

type ListEventsParams struct {
	Column1 string
	Limit   int32
}

type ListEventsRow struct {
	ID              uuid.UUID
	EventType       EventType
	Title           string
	Description     sql.NullString
	Location        sql.NullString
	StartTime       time.Time
	EndTime         sql.NullTime
	CreatedBy       uuid.UUID
	MaxParticipants sql.NullInt32
	Status          sql.NullString
	CreatedAt       sql.NullTime
	UpdatedAt       sql.NullTime
	TotalCount      int64
}

func (q *Queries) ListEvents(ctx context.Context, arg ListEventsParams) ([]ListEventsRow, error) {
	rows, err := q.db.QueryContext(ctx, listEvents, arg.Column1, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListEventsRow
	for rows.Next() {
		var i ListEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.EventType,
			&i.Title,
			&i.Description,
			&i.Location,
			&i.StartTime,
			&i.EndTime,
			&i.CreatedBy,
			&i.MaxParticipants,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE events 
SET
    title = $2,
    description = $3,
    location = $4,
    start_time = $5,
    end_time = $6,
    created_by = $7,
    max_participants = $8,
    status = $9
WHERE id = $1 
RETURNING
    id,
    event_type,
    title,
    description,
    location,
    start_time,
    end_time,
    created_by,
    max_participants,
    status,
    created_at,
    updated_at
`

type UpdateEventParams struct {
	ID              uuid.UUID
	Title           string
	Description     sql.NullString
	Location        sql.NullString
	StartTime       time.Time
	EndTime         sql.NullTime
	CreatedBy       uuid.UUID
	MaxParticipants sql.NullInt32
	Status          sql.NullString
}

type UpdateEventRow struct {
	ID              uuid.UUID
	EventType       EventType
	Title           string
	Description     sql.NullString
	Location        sql.NullString
	StartTime       time.Time
	EndTime         sql.NullTime
	CreatedBy       uuid.UUID
	MaxParticipants sql.NullInt32
	Status          sql.NullString
	CreatedAt       sql.NullTime
	UpdatedAt       sql.NullTime
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (UpdateEventRow, error) {
	row := q.db.QueryRowContext(ctx, updateEvent,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Location,
		arg.StartTime,
		arg.EndTime,
		arg.CreatedBy,
		arg.MaxParticipants,
		arg.Status,
	)
	var i UpdateEventRow
	err := row.Scan(
		&i.ID,
		&i.EventType,
		&i.Title,
		&i.Description,
		&i.Location,
		&i.StartTime,
		&i.EndTime,
		&i.CreatedBy,
		&i.MaxParticipants,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
