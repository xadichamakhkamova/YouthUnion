// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package storage

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type EventType string

const (
	EventTypeINDIVIDUAL EventType = "INDIVIDUAL"
	EventTypeTEAM       EventType = "TEAM"
)

func (e *EventType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EventType(s)
	case string:
		*e = EventType(s)
	default:
		return fmt.Errorf("unsupported scan type for EventType: %T", src)
	}
	return nil
}

type NullEventType struct {
	EventType EventType
	Valid     bool // Valid is true if EventType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEventType) Scan(value interface{}) error {
	if value == nil {
		ns.EventType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EventType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEventType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EventType), nil
}

type Event struct {
	ID                  uuid.UUID
	EventType           EventType
	Title               string
	Description         sql.NullString
	Location            sql.NullString
	StartTime           time.Time
	EndTime             sql.NullTime
	CreatedBy           uuid.UUID
	MaxParticipants     sql.NullInt32
	CurrentParticipants sql.NullInt32
	Status              sql.NullString
	CreatedAt           sql.NullTime
	UpdatedAt           sql.NullTime
	DeletedAt           sql.NullInt64
}

type EventParticipant struct {
	ID       uuid.UUID
	EventID  uuid.UUID
	UserID   uuid.UUID
	Role     sql.NullString
	JoinedAt sql.NullTime
}
